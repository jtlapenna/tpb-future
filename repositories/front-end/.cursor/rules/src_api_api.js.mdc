---
description: API service for handling product and store-related requests in the kiosk application.
globs: ['src/api/api.js']
alwaysApply: false
---

# API Service Documentation

## Overview
This file defines the `API` class, which serves as a service for making HTTP requests to the kiosk's backend API. It utilizes the `axios` library to handle requests and is configured with base URL and authentication tokens derived from environment variables or fallback configurations.

## Key Components

### API Class
- **Constructor**: Initializes an instance of the `API` class, setting up the `axios` instance with the base URL and default headers.

### Methods
- **getProducts(pageconfig)**: Fetches a list of products for the current kiosk, with pagination and sorting options.
- **getProduct(productId)**: Retrieves a specific product by its ID.
- **getBrands(pageconfig)**: Returns a list of brands, with pagination and sorting options.
- **getProductsMinimal(page, hardReloadProducts)**: Fetches a minimal list of products, with options for hard reloading and date filtering.
- **getProductsMinimalForDate({ page, updatedAt })**: Similar to `getProductsMinimal`, but allows specifying an updated date.
- **getCategories(params)**: Retrieves store categories based on provided parameters.
- **getArticles(params)**: Fetches store articles, with an option for minimal data.
- **getTags(params)**: Returns tags, with an option to fetch featured tags.
- **getTaxes(params)**: Posts tax-related data for an order and returns the response.
- **createCustomers(customer)**: Creates a new customer and returns the created customer data.
- **getSettings()**: Fetches remote kiosk settings.
- **getProductsWhenNoExist(storeId)**: Checks for product availability in a specified store.
- **verifyProductsExpiration(storeId, products)**: Verifies the expiration status of products and returns the results.

## Dependencies
This file imports the following:
- `src/api/urls.js`: Contains URL constants used for API endpoints, such as `ORDERS_PREVIEW`.

This file is not imported by any other files in the repository, indicating it serves as a standalone service for API interactions.

## Usage Examples
To use the API service, you can import it and call its methods as follows:
```javascript
import api from './api';

// Fetch products
api.getProducts({ page: 1, per_page: 10 }).then(response => {
  console.log(response.data);
});

// Create a new customer
api.createCustomers({ name: 'John Doe' }).then(customer => {
  console.log('Created customer:', customer);
});
```

## Best Practices
- Ensure that environment variables are set correctly for API URLs and tokens to avoid runtime errors.
- Handle errors gracefully when making API calls, using `.catch()` to manage rejected promises.
- Use pagination and sorting options to optimize data retrieval and improve performance.
- Regularly update the API methods to reflect any changes in the backend API structure or endpoints.