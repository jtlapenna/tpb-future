---
description: Documentation for the Dockerfile used to set up a Node.js environment for a kiosk application.
globs: ['dockerfile']
alwaysApply: false
---

# Dockerfile Documentation

## Overview
This Dockerfile is used to create a Docker image for a Node.js application designed to run a kiosk service. It sets up the environment, installs necessary dependencies, and specifies how to run the application.

## Key Components
- **FROM node:14.18.0**: This line specifies the base image for the Docker container, which is Node.js version 14.18.0. This version is chosen to ensure compatibility with the application code.
- **WORKDIR /kiosk**: This command sets the working directory inside the container to `/kiosk`. All subsequent commands will be run in this directory.
- **COPY package*.json ./**: This command copies the `package.json` and `package-lock.json` files from the local directory to the working directory in the container. These files are essential for managing the application's dependencies.
- **RUN npm install -g firebase-tools**: This command installs the Firebase CLI globally within the container, allowing the application to interact with Firebase services.
- **RUN npm ci**: This command installs the dependencies listed in `package-lock.json`, ensuring a clean and reproducible build.
- **EXPOSE 8080**: This line informs Docker that the container will listen on port 8080 at runtime. This is the port that the application will use to serve requests.
- **CMD ["npm", "run", "start"]**: This command specifies the default command to run when the container starts, which is to execute the `start` script defined in `package.json`.

## Dependencies
This Dockerfile does not import any other files in the repository, nor is it imported by any other files. It is a standalone file that defines the environment for the application.

## Usage Examples
To build the Docker image using this Dockerfile, run the following command in the terminal:
```bash
docker build -t kiosk-app .
```
To run the container from the built image, use:
```bash
docker run -p 8080:8080 kiosk-app
```

## Best Practices
- Ensure that the Node.js version specified in the `FROM` line is compatible with your application code to avoid runtime errors.
- Regularly update the base image to include security patches and improvements.
- Use `.dockerignore` to exclude unnecessary files from being copied into the image, which can help reduce the image size and build time.
- Test the Docker image locally before deploying it to production to ensure that all dependencies are correctly installed and the application runs as expected.