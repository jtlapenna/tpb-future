---
description: Policy class for managing permissions related to store category tax actions.
globs: ['app/policies/store_category_tax_policy.rb']
alwaysApply: false
---

# StoreCategoryTaxPolicy

## Overview
The `StoreCategoryTaxPolicy` class is responsible for defining the authorization rules for actions related to store category taxes within the application. It inherits from `ApplicationPolicy`, which provides a base structure for all policy classes in the application.

## Key Components
- **Scope Class**: The `Scope` class defines how records are retrieved based on the user's role. If the user is an admin, they can access all records. Otherwise, only records owned by the user are accessible.
  - **resolve**: This method checks the user's role and returns the appropriate scope of records.

- **Authorization Methods**: The following methods determine if a user is authorized to perform specific actions:
  - **index?**: Returns true if the user is present, allowing them to view the list of store category taxes.
  - **create?**: Returns true if the user is present, allowing them to create a new store category tax.
  - **update?**: Returns true if the user is present, allowing them to update an existing store category tax.
  - **show?**: Returns true if the user is present, allowing them to view a specific store category tax.

- **permitted_attributes**: This method defines the attributes that are permitted for mass assignment when creating or updating store category taxes. In this case, it allows `:name` and `:value` attributes.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It operates independently, relying solely on the `ApplicationPolicy` class for its base functionality.

## Usage Examples
To check if a user can create a store category tax:
```ruby
policy = StoreCategoryTaxPolicy.new(user, store_category_tax)
if policy.create?
  # Proceed with creation logic
end
```

## Best Practices
- Ensure that the user object passed to the policy is always valid and contains the necessary role information.
- Regularly review and update the permitted attributes to align with any changes in the data model.
- Use descriptive method names for authorization checks to maintain clarity in the codebase.