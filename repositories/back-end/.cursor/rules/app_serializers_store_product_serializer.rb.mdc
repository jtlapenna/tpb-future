---
description: Serializer for StoreProduct model, defining how it is represented in JSON format.
globs: ['app/serializers/store_product_serializer.rb']
alwaysApply: false
---

# StoreProductSerializer Documentation

## Overview
The `StoreProductSerializer` class is responsible for serializing the `StoreProduct` model into JSON format. It utilizes the `ActiveModel::Serializer` framework to define which attributes and associations should be included in the serialized output. This is particularly useful for APIs that need to present data in a structured format.

## Key Components
- **Attributes**: The serializer specifies a list of attributes that will be included in the JSON representation of a `StoreProduct`. These attributes include:
  - `id`: Unique identifier for the product.
  - `sku`: Stock Keeping Unit, a unique identifier for each distinct product and service that can be purchased.
  - `name`: The name of the product.
  - `weight`: The weight of the product.
  - `tag_list`: A list of tags associated with the product.
  - `description`: A detailed description of the product.
  - `share_email_template`: Template for sharing the product via email.
  - `share_sms_template`: Template for sharing the product via SMS.
  - `stock`: Current stock level of the product.
  - `override_tags`: Tags that override default tags.
  - `status`: Current status of the product (e.g., active, inactive).
  - `latest_update_source`: Source of the latest update to the product.
  - `is_medical_only`: Boolean indicating if the product is medical only.
  - `is_full_screen`: Boolean indicating if the product is displayed in full screen.

- **Associations**: The serializer defines several associations that link the `StoreProduct` to other models:
  - `belongs_to :product_variant`
  - `belongs_to :brand`
  - `belongs_to :store_category`
  - `belongs_to :primary_image`
  - `belongs_to :thumb_image`
  - `has_one :store, serializer: StoreMinimalSerializer`
  - `has_many :product_values`
  - `has_many :images`
  - `has_many :own_images`
  - `has_many :attribute_values`
  - `has_one :video`

- **Custom Method**: The `store_taxes` method retrieves and returns an array of taxes associated with the store of the product. This method iterates through the `store_taxes` of the associated store and collects them into an array.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It operates independently, relying solely on the `ActiveModel::Serializer` framework and the associated models defined in the application.

## Usage Example
To use the `StoreProductSerializer`, you would typically instantiate it with a `StoreProduct` object and render it in a controller action:
```ruby
render json: @store_product, serializer: StoreProductSerializer
```

## Best Practices
- Ensure that the attributes defined in the serializer are relevant to the API consumers to avoid over-fetching or under-fetching data.
- Keep the serializer focused on a single model to maintain clarity and separation of concerns.
- Use custom methods judiciously to encapsulate logic that is specific to the serialization process, such as the `store_taxes` method in this example.