---
description: Serializer for product layout data in the application.
globs: ['app/serializers/product_layout_serializer.rb']
alwaysApply: false
---

# ProductLayoutSerializer

## Overview
The `ProductLayoutSerializer` is a serializer class that formats the product layout data for JSON representation. It is part of the ActiveModel Serializers framework, which is used to create a structured JSON response for API endpoints in Ruby on Rails applications.

## Key Components
- **Class Definition**: The class `ProductLayoutSerializer` inherits from `ActiveModel::Serializer`, which provides the necessary functionality to serialize Ruby objects into JSON.
- **Attributes**: The serializer defines three attributes that will be included in the serialized output:
  - `id`: The unique identifier for the product layout.
  - `name`: The name of the product layout.
  - `stylesheet`: The associated stylesheet for the product layout.
- **Associations**: The serializer also defines two associations:
  - `has_many :elements`: This indicates that a product layout can have multiple elements associated with it.
  - `has_many :tabs`: This indicates that a product layout can have multiple tabs associated with it.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It stands alone as a serializer for the product layout data.

## Usage Examples
To use the `ProductLayoutSerializer`, you would typically call it within a controller action that responds to API requests. For example:
```ruby
render json: @product_layout, serializer: ProductLayoutSerializer
```
This would serialize the `@product_layout` instance using the defined attributes and associations.

## Best Practices
- Ensure that the attributes defined in the serializer accurately reflect the data structure of the underlying model.
- Keep the serializer focused on a single responsibility, which is to format the data for the API response.
- If additional logic is needed for formatting or processing data, consider using custom methods within the serializer or leveraging the model's methods instead.