---
description: Documentation for the KioskProductSerializer class in the serializers directory.
globs: ['app/serializers/kiosk_product_serializer.rb']
alwaysApply: false
---

# KioskProductSerializer Documentation

## Overview
The `KioskProductSerializer` class is responsible for serializing the `KioskProduct` model into a JSON format that can be easily consumed by clients. It leverages the `ActiveModel::Serializer` framework to define how the attributes and associations of the `KioskProduct` are represented in the serialized output.

## Key Components
- **Class Definition**: `KioskProductSerializer` inherits from `ActiveModel::Serializer`, which provides the necessary functionality to serialize Active Record objects.
- **Attributes**: The serializer defines two attributes to be included in the serialized output:
  - `id`: The unique identifier for the kiosk product.
  - `featured`: A boolean indicating whether the product is featured.
- **Associations**:
  - `belongs_to :store_product`: This indicates that each `KioskProduct` is associated with a `StoreProduct`. The `store_product` data will be included in the serialized output.
  - `has_one :store`: This specifies that the serializer will include a single associated `Store` object, which will be serialized using the `StoreMinimalSerializer`. This allows for a more compact representation of the store data.

## Dependencies
This file does not import any other files in the repository, nor is it imported by any other files. It stands alone in its functionality, focusing solely on the serialization of the `KioskProduct` model.

## Usage Examples
To use the `KioskProductSerializer`, you would typically instantiate it with a `KioskProduct` object and render it in a controller action. For example:
```ruby
kiosk_product = KioskProduct.find(params[:id])
render json: kiosk_product, serializer: KioskProductSerializer
```

## Best Practices
- Ensure that the attributes defined in the serializer accurately reflect the data needed by the client. Avoid over-fetching data by only including necessary attributes.
- When adding new attributes or associations, consider the impact on performance and the size of the serialized output.
- Keep the serializer focused on a single model to maintain clarity and separation of concerns.