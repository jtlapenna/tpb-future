---
description: Documentation for the directory structure of the project, providing insights into the organization and components of the codebase.
globs: ['mdc_output/directory_structure.txt']
alwaysApply: false
---

# Directory Structure Overview

This document outlines the directory structure of the project, detailing the organization of files and folders within the codebase. It serves as a guide for developers to understand where to find specific components, services, and assets, facilitating easier navigation and maintenance of the project.

## Purpose and Functionality

The `directory_structure.txt` file provides a visual representation of the project's file hierarchy. It helps developers quickly locate files related to specific features or functionalities, ensuring efficient collaboration and code management.

## Key Components

- **e2e**: Contains end-to-end tests for the application, including specifications and page objects.
- **mdc_output**: This folder holds output files generated by the Model-Driven Code (MDC) analysis, including reports and visualizations like the dependency graph.
- **src**: The main source directory where the application code resides. It includes subdirectories for various features such as articles, attributes, brands, categories, clients, and more. Each feature typically contains components, services, models, and associated styles.
- **assets**: Contains static assets like fonts, images, and stylesheets used throughout the application.
- **environments**: Holds configuration files for different environments (development, production, etc.), allowing for environment-specific settings.
- **tests**: Includes test files and configurations for ensuring code quality and functionality.

## Dependencies

This file does not import any other files in the repository, nor is it imported by any other files. It serves as a standalone reference for understanding the project's structure.

## Usage Examples

While this file does not contain executable code, it can be referenced by developers when navigating the project. For example, if a developer is tasked with modifying the article component, they can quickly locate the relevant files under `src/app/articles`.

## Best Practices

- **Maintain Consistency**: Ensure that new components and services are added to the appropriate directories to maintain the structure.
- **Documentation**: Keep this directory structure updated as the project evolves, adding or removing components as necessary.
- **Modular Design**: Encourage a modular approach to development, where each feature is encapsulated within its own directory, making it easier to manage and scale the application.

By following these guidelines and utilizing the directory structure effectively, developers can enhance their productivity and contribute to a well-organized codebase.