---
description: Styling for the filter component in the shared components directory.
globs: ['src/app/shared/components/filter/filter.component.scss']
alwaysApply: false
---

# Filter Component SCSS Documentation

## Overview
This SCSS file contains the styling for the filter component used in the application. It defines the appearance and layout of various elements within the filter, ensuring a consistent and user-friendly interface.

## Key Components

### Badge Icon
```scss
.badge i {
  cursor: pointer;
}
```
- **Purpose**: This rule styles the icon within a badge to change the cursor to a pointer, indicating that it is clickable.

### Dropdown Toggle
```scss
.dropdown-toggle {
  min-width: 150px;
}
```
- **Purpose**: Sets a minimum width for the dropdown toggle button, ensuring it is adequately sized for user interaction.

### Input Group
```scss
.input-group {
  input.form-control {
    height: 38px;
  }

  button.dropdown-toggle {
    border: 1px solid rgb(206, 212, 218);
    border-right: none;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  .ng-select.peak {
    flex-grow: 1;

    .ng-select-container {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }
}
```
- **Purpose**: Styles the input group, including the input field and dropdown button. It ensures that the button has no right border and rounded corners on the left side, creating a seamless look with the input field.

### Host Styles
```scss
:host ::ng-deep {
  .ng-select.peak .ng-select-container {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}
```
- **Purpose**: Applies styles to the `ng-select` component when it is used within the filter component, ensuring consistent border radius.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It is a standalone SCSS file that directly styles the filter component.

## Usage Examples
- To use the filter component, ensure that the corresponding HTML structure is in place, and this SCSS file will automatically apply the styles defined here.

## Best Practices
- Maintain consistent styling by adhering to the defined styles in this file when adding new elements to the filter component.
- Avoid overriding styles unless necessary; instead, extend existing classes to maintain uniformity across the application.
- Regularly review and refactor styles to ensure they remain relevant and efficient as the component evolves.