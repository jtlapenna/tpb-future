---
description: Documentation for the CustomValidators module in the validators.ts file.
globs: ['src/app/shared/validators/validators.ts']
alwaysApply: false
---

# CustomValidators Module Documentation

## Overview
The `validators.ts` file defines a set of custom validation functions for use within the application. Currently, it exports a single validator, `UrlFormat`, which is designed to validate URL formats using a dedicated URL validation function.

## Key Components
- **CustomValidators**: An object that holds all custom validators. In this file, it currently contains:
  - **UrlFormat**: This is a validator that checks if a given input conforms to a valid URL format. It is created by invoking the `urlFormatValidator` function imported from `url.validator.ts`.

## Dependencies
This file imports the following module:
- `urlFormatValidator` from `src/app/shared/validators/url.validator.ts`: This function is responsible for the actual URL validation logic. It is crucial for the `UrlFormat` validator to function correctly.

## Usage Example
To use the `UrlFormat` validator in your forms or validation logic, you can import it as follows:
```javascript
import { CustomValidators } from './validators';

// Example usage in a form validation scenario
const urlInput = 'https://example.com';
const isValidUrl = CustomValidators.UrlFormat(urlInput);
console.log(isValidUrl); // true or false based on validation
```

## Best Practices
- Ensure that the `urlFormatValidator` function is well-tested to handle various URL formats, including edge cases.
- When adding new validators, follow the same structure to maintain consistency and readability in the `CustomValidators` object.
- Keep the validators modular and focused on a single responsibility to enhance maintainability and testability.