---
description: Documentation for the main application component in a Vue.js codebase.
globs: ['src/App.vue']
alwaysApply: false
---

# App.vue Documentation

## Overview
The `App.vue` file serves as the main component of the Vue.js application. It acts as the root component that houses various child components, manages application state, and handles user interactions. This file is crucial for rendering the application's UI and managing its behavior.

## Key Components

### Template Section
- **Main Structure**: The template contains a `<div>` that serves as the main container for the application. It includes event listeners for user interactions such as clicks and touch events.
- **CoolLightBox**: A component for displaying images in a lightbox format. It takes props for items, index, and effects.
- **Background Handling**: Depending on the configuration, it conditionally renders a video or an image as the background.
- **Sidebar and Slideshow**: The sidebar component is conditionally rendered based on the application's state, and a brand slideshow is displayed in kiosk mode.
- **Modals**: The file includes several modal components for handling user sessions, out-of-stock notifications, and low stock alerts.
- **Router View**: The `<router-view>` component is used for rendering the current route's component, passing necessary props for state management.

### Script Section
- **Imports**: The script imports various dependencies, including API repositories, Vuex store methods, and third-party libraries like Pusher and Sentry for real-time updates and error tracking.
- **Data Properties**: The component maintains a variety of data properties, including cart items, product lists, and UI states (e.g., loading states, visibility of modals).
- **Computed Properties**: Includes computed properties for calculating the total cart value and determining background visibility.
- **Lifecycle Hooks**: The `created` and `mounted` hooks are used for setting up event listeners, fetching initial data, and connecting to real-time services.
- **Methods**: Contains numerous methods for handling user interactions, fetching data, managing the cart, and controlling UI behavior (e.g., idle handling, session management).

## Dependencies
- **Imported By**: This file is imported by `src/main.js`, which initializes the Vue application.
- **No External Imports**: This file does not import any other files from the repository, but it relies on various external libraries and components.

## Usage Examples
- To use the `App.vue` component, ensure it is registered in the main Vue instance in `main.js`:
  ```javascript
  import App from './App.vue';
  new Vue({
    render: h => h(App),
  }).$mount('#app');
  ```

## Best Practices
- **State Management**: Utilize Vuex for managing application state effectively, especially for cart and product data.
- **Event Handling**: Be cautious with event listeners to avoid memory leaks; ensure to remove listeners in the `beforeDestroy` lifecycle hook.
- **Performance**: Optimize the rendering of components and modals to enhance user experience, especially in kiosk mode where performance is critical.
- **Error Handling**: Implement robust error handling using Sentry or similar services to track and manage application errors effectively.
- **Code Organization**: Keep the component organized by separating concerns; consider breaking down large methods into smaller, reusable functions.