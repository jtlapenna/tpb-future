---
description: Documentation for the directory structure of the project, outlining the organization and key components of the codebase.
globs: ['mdc_output/directory_structure.txt']
alwaysApply: false
---

# Directory Structure Overview

This document provides a comprehensive overview of the directory structure of the project, detailing the organization of files and folders within the codebase. It serves as a guide for developers to understand where to find specific components and how they are structured.

## Purpose and Functionality

The `directory_structure.txt` file outlines the hierarchical organization of the project files, including source code, configuration files, assets, and documentation. It helps developers navigate the project efficiently and understand the relationships between different components.

## Key Components

- **Root Directory (`./`)**: The top-level directory containing all project files.
- **.firebase**: Contains Firebase-related scripts and configurations.
- **config**: Holds configuration files such as `index.js` and `workbox.js` that are essential for application setup.
- **functions**: Contains serverless function definitions and configurations, including ESLint settings.
- **mdc_output**: This directory is used for output files generated by the project, including reports and analysis documents.
- **src**: The main source directory where the application code resides, organized into subdirectories for analytics, API, assets, components, and more.
- **static**: Contains static assets like images, CSS, and JavaScript files that are served directly.
- **Various Analysis Files**: These files (e.g., `CODE_QUALITY_ANALYSIS.md`, `SECURITY_ANALYSIS.md`) provide insights into different aspects of the codebase's quality and performance.

## Dependencies

This file does not import any other files in the repository, nor is it imported by any other files. It serves as a standalone reference for understanding the project's structure.

## Usage Examples

While this file does not contain executable code, it can be referenced by developers when navigating the project. For example, if a developer is looking for the analytics-related code, they can refer to the `src/analytics` directory as outlined in this document.

## Best Practices

- **Keep the Structure Organized**: As the project grows, maintain a clear and logical directory structure to facilitate easy navigation.
- **Document Changes**: If the directory structure changes, update this file to reflect the new organization.
- **Use Descriptive Names**: Ensure that directory and file names are descriptive to make it easier for new developers to understand the purpose of each component.
- **Regularly Review**: Periodically review the directory structure and documentation to ensure it remains relevant and useful.