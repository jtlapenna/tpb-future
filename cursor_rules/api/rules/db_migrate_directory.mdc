---
description: Documentation for the db/migrate directory containing migration files for database schema changes.
globs: ['db/migrate/*']
alwaysApply: false
---

# db/migrate Directory Documentation

## Overview
The `db/migrate` directory contains migration files that define changes to the database schema for the application. Each migration file is timestamped and describes a specific change, such as adding or removing columns, creating tables, or modifying existing structures. These migrations are essential for maintaining the integrity and evolution of the database schema over time.

## Key Files and Their Roles
- **20241019161124_remove_product_id_from_cart_items.rb**: This migration removes the `product_id` column from the `cart_items` table, which may be part of a refactoring effort to simplify the cart structure.
- **20170929174923_add_video_url_to_catalog_product.rb**: This migration adds a `video_url` column to the `catalog_products` table, allowing products to have associated video content.
- **20190306160208_assign_store_id_to_catalog_sync.rb**: This migration assigns a `store_id` to the `catalog_sync` table, linking catalog synchronization processes to specific stores.
- **20180627023846_create_join_table_catalog_article_catalog_product.rb**: This migration creates a join table to establish a many-to-many relationship between catalog articles and catalog products.

These are just a few examples, but each migration file serves a specific purpose in evolving the database schema to meet application requirements.

## Relation to Other Parts of the Codebase
The migrations in this directory are executed in sequence to apply changes to the database schema. They are typically run during the deployment process or when setting up the application in a new environment. The changes made by these migrations are reflected in the models and controllers that interact with the database, ensuring that the application functions correctly with the updated schema.

## Common Patterns and Conventions
- **Timestamped Filenames**: Each migration file is prefixed with a timestamp, which ensures that migrations are applied in the order they were created. This is crucial for maintaining the correct sequence of database changes.
- **Descriptive Naming**: The filenames are descriptive, indicating the purpose of the migration, which helps developers understand the changes at a glance.
- **Use of ActiveRecord Migrations**: The migrations typically use ActiveRecord's migration methods, such as `create_table`, `add_column`, and `remove_column`, to define the changes in a database-agnostic way.

## Best Practices
- **Keep Migrations Small and Focused**: Each migration should address a single change to the schema. This makes it easier to understand the purpose of each migration and to troubleshoot issues.
- **Test Migrations**: Always test migrations in a development environment before applying them to production. This helps catch any potential issues that could arise from schema changes.
- **Avoid Changing Migrations After They Are Applied**: Once a migration has been applied, avoid modifying it. Instead, create a new migration to make further changes. This preserves the history of schema changes and ensures that the database remains consistent across different environments.
- **Document Complex Migrations**: If a migration involves complex logic or multiple changes, consider adding comments within the migration file to explain the rationale behind the changes.

By following these guidelines, developers can effectively manage database schema changes and maintain a clean and organized migration history.