---
description: Documentation for the Client model in the application.
globs: ['app/models/client.rb']
alwaysApply: false
---

# Client Model Documentation

## Overview
The `Client` model represents a client entity in the application, inheriting from `ApplicationRecord`. It establishes relationships with `stores` and `users`, and enforces validation rules for the `name` attribute.

## Key Components
- **Class Definition**: `class Client < ApplicationRecord`
  - This defines the `Client` model, which is a subclass of `ApplicationRecord`, allowing it to interact with the database through ActiveRecord.

- **Associations**:
  - `has_many :stores, inverse_of: :client, dependent: :nullify`
    - This sets up a one-to-many relationship with the `Store` model. If a client is deleted, the associated stores will not be deleted but their `client_id` will be set to `null`.
  - `has_many :users, dependent: :nullify`
    - Similar to stores, this establishes a relationship with the `User` model, allowing multiple users to be associated with a client.

- **Validations**:
  - `validates :name, uniqueness: true, presence: true`
    - This ensures that each client has a unique name and that the name cannot be blank.

## Schema Information
The `clients` table in the database has the following structure:
- `id`: Primary key, automatically generated.
- `active`: Boolean indicating if the client is active.
- `name`: String representing the client's name, which must be unique and present.
- `created_at`: Timestamp for when the record was created.
- `updated_at`: Timestamp for when the record was last updated.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It operates independently within the application.

## Usage Examples
To create a new client:
```ruby
client = Client.create(name: 'Example Client')
```
To retrieve all clients:
```ruby
clients = Client.all
```
To delete a client:
```ruby
client.destroy
```

## Best Practices
- Always ensure that the `name` attribute is unique and present when creating or updating a client.
- Be cautious when deleting clients, as this will nullify the `client_id` in associated stores and users, which may affect data integrity.
- Use the `inverse_of` option in associations to maintain consistency in object relationships.