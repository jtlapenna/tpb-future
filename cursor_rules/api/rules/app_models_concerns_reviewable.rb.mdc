---
description: Documentation for the Reviewable concern in the application.
globs: ['app/models/concerns/reviewable.rb']
alwaysApply: false
---

# Reviewable Concern Documentation

## Overview
The `Reviewable` module is a concern that adds review functionality to models in the application. It allows any model that includes this concern to have associated reviews, enabling a flexible review system.

## Key Components
- **Module Declaration**: The module is defined as `Reviewable` and extends `ActiveSupport::Concern`, which provides a way to include shared behavior in classes.
- **Included Block**: The `included` block is executed when the module is included in a class. It sets up the following:
  - **Associations**: The `has_many :reviews` association allows the model to have multiple reviews. The `as: :reviewable` option indicates that this model can be reviewed by other entities. The `inverse_of: :reviewable` option helps Rails understand the relationship better, and `dependent: :nullify` ensures that if the reviewable object is deleted, the associated reviews will not be deleted but will have their `reviewable_id` set to `nil`.
  - **Nested Attributes**: The `accepts_nested_attributes_for :reviews` method allows for nested attributes to be passed for reviews, enabling the creation and updating of reviews directly through the parent model. The options `allow_destroy: true` and `reject_if: :all_blank` provide flexibility in managing reviews through forms.

## Dependencies
This file does not import any other files in the repository, nor is it imported by any other files. It is a standalone concern that can be included in any model that requires review functionality.

## Usage Example
To use the `Reviewable` concern, simply include it in your model:
```ruby
class Product < ApplicationRecord
  include Reviewable
end
```

This allows the `Product` model to have reviews associated with it, and you can manage reviews through nested attributes in forms.

## Best Practices
- Ensure that any model including this concern has a corresponding `Review` model defined with the necessary attributes (e.g., rating, comment).
- When using nested attributes, validate the presence of necessary fields in the `Review` model to maintain data integrity.
- Consider implementing additional methods in the model that includes this concern to handle specific business logic related to reviews, such as calculating average ratings or filtering reviews.