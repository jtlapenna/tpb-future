---
description: Policy class for managing article store permissions in the application.
globs: ['app/policies/store_article_policy.rb']
alwaysApply: false
---

# StoreArticlePolicy

## Overview
The `StoreArticlePolicy` class is responsible for defining the authorization rules for actions related to articles in the application. It extends the `ApplicationPolicy`, which provides a base structure for all policy classes in the application. This policy ensures that only authorized users can perform actions such as viewing, creating, updating, or deleting articles.

## Key Components

### Class Structure
- **StoreArticlePolicy**: The main class that defines the authorization rules for article-related actions.
  - **Scope**: A nested class that determines the scope of records that the user is allowed to access. It includes a `resolve` method that checks if the user is an admin or an owner of the articles.

### Methods
- **resolve**: This method returns the scope of articles that the user can access. If the user is an admin, they can access all articles. Otherwise, it restricts access to articles owned by the user.
- **index?**: Returns true if the user is logged in, allowing them to view the list of articles.
- **create?**: Returns true if the user is logged in, allowing them to create new articles.
- **update?**: Returns true if the user is logged in, allowing them to update existing articles.
- **show?**: Returns true if the user is logged in, allowing them to view a specific article.
- **destroy?**: Returns true if the user is logged in, allowing them to delete an article.
- **default_products?**: Returns true if the user is logged in, allowing them to access default products related to articles.
- **permitted_attributes**: Defines the attributes that are permitted for mass assignment when creating or updating articles. It includes `:article_id` and an array of `store_product_ids`.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It relies solely on the `ApplicationPolicy` class for its base functionality.

## Usage Examples
To use this policy, you would typically check permissions in your controllers or views. For example:
```ruby
if StoreArticlePolicy.new(current_user, article).show?
  # Allow access to the article
end
```

## Best Practices
- Ensure that all user actions are checked against the appropriate policy methods to maintain security and proper access control.
- Keep the `permitted_attributes` method updated to reflect any changes in the article model's attributes.
- Consider adding more granular permissions if the application grows in complexity, such as role-based access controls.