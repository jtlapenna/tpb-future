---
description: Documentation for the StoreSetting model in the application.
globs: ['app/models/store_setting.rb']
alwaysApply: false
---

# StoreSetting Model Documentation

## Overview
The `StoreSetting` model is responsible for managing various settings related to a store in the application. It extends from `ApplicationRecord`, which provides it with the basic functionality of an ActiveRecord model. This model encapsulates settings that can be customized for each store, such as email configurations, display preferences, and other operational parameters.

## Key Components
- **Associations**:
  - `belongs_to :store`: This establishes a one-to-one relationship with the `Store` model, indicating that each `StoreSetting` is associated with a specific store.
  - `has_one :background_media`: This sets up a one-to-one relationship with the `Asset` model, allowing each store setting to have a background media asset. The `dependent: :nullify` option ensures that if the background media is deleted, the reference in `StoreSetting` is set to `NULL` instead of deleting the `StoreSetting` itself.
  - `has_many :purchase_limits`: This allows multiple purchase limits to be associated with a store setting, with the `dependent: :destroy` option ensuring that all associated purchase limits are deleted if the `StoreSetting` is deleted.

- **Nested Attributes**:
  - `accepts_nested_attributes_for :background_media`: This allows for the background media attributes to be nested within the store settings form, enabling the creation and updating of associated records in a single form submission.
  - `accepts_nested_attributes_for :purchase_limits`: Similar to background media, this allows for purchase limits to be managed alongside the store settings.

- **Data Storage**:
  - The `store :data` line defines a serialized attribute `data` that can hold various settings in JSON format. This includes fields like `admin_email`, `printer_location`, and several others that control the store's behavior and appearance.

## Dependencies
This file does not import any other files in the repository, nor is it imported by any other files. It operates independently, relying solely on the ActiveRecord framework and its associations.

## Usage Examples
To create or update a store setting, you can use the following example:
```ruby
store_setting = StoreSetting.new(
  store: some_store,
  background_media_attributes: { ... },
  purchase_limits_attributes: [{ ... }, { ... }],
  data: {
    admin_email: 'admin@example.com',
    main_color: '#FFFFFF',
    # other settings...
  }
)
store_setting.save
```

## Best Practices
- Ensure that any changes to the `data` attribute are validated to prevent invalid JSON from being saved.
- When using nested attributes, be cautious with the `allow_destroy` option to avoid unintentional deletions of associated records.
- Regularly review the fields stored in the `data` attribute to ensure they are still relevant and necessary for the application's functionality.