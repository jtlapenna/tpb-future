---
description: Documentation for the Cart model in the application.
globs: ['app/models/cart.rb']
alwaysApply: false
---

# Cart Model Documentation

## Overview
The `Cart` model represents a shopping cart in the application. It is responsible for managing the items that a user intends to purchase, including the relationships with `cart_items` and `products`. The model also enforces validation rules to ensure that necessary information is provided.

## Key Components
- **Class Definition**: `class Cart < ApplicationRecord`
  - Inherits from `ApplicationRecord`, which provides the basic functionality for Active Record models.

- **Associations**:
  - `has_many :cart_items, dependent: :destroy`
    - This establishes a one-to-many relationship between `Cart` and `CartItem`. If a cart is deleted, all associated cart items will also be deleted.
  - `has_many :products, through: :cart_items`
    - This sets up a many-to-many relationship with `Product` through `CartItem`, allowing access to products directly from the cart.

- **Validations**:
  - `validates :phone_number, presence: true`
    - Ensures that a phone number is provided when creating or updating a cart.

- **Instance Method**:
  - `def get_items(id)`
    - This method retrieves the items in the cart identified by the given `id`. It returns an array of hashes, each containing the `productId` of the items in the cart.
    - **Usage Example**:
      ```ruby
      cart = Cart.new
      items = cart.get_items(1) # Retrieves items for the cart with ID 1
      ```

## Dependencies
This file does not import any other files in the repository, nor is it imported by any other files. It operates independently within the application, relying solely on Active Record for database interactions.

## Best Practices
- Ensure that the `phone_number` is always provided when creating or updating a cart to avoid validation errors.
- Use the `get_items` method to retrieve cart items instead of accessing `cart_items` directly to maintain encapsulation and ensure any future changes to the method's implementation do not affect other parts of the codebase.
- Consider implementing additional validations or methods as needed to enhance the functionality of the cart, such as calculating total prices or managing discounts.