---
description: Serializer for minimal store category representation in API responses.
globs: ['app/serializers/api/v1/store_category_minimal_serializer.rb']
alwaysApply: false
---

# StoreCategoryMinimalSerializer

## Overview
The `StoreCategoryMinimalSerializer` is a serializer class used in the API to format the response for store category objects. It is part of the version 1 API and is designed to provide a minimal representation of a store category, including essential attributes and associations.

## Key Components
- **Class Definition**: The class is defined within the `Api::V1` module, indicating that it is part of the first version of the API.
- **Attributes**: The serializer specifies the following attributes to be included in the serialized output:
  - `id`: The unique identifier for the store category.
  - `name`: The name of the store category.
  - `created_at`: The timestamp when the store category was created.
  - `updated_at`: The timestamp when the store category was last updated.
  - `order`: The order in which the store category should be displayed.
- **Associations**:
  - `belongs_to :store`: This indicates that each store category is associated with a single store, and it uses the `StoreMinimalSerializer` to serialize the store object.
  - `has_many :store_category_taxes`: This indicates that a store category can have multiple associated store category taxes.
  - `has_one :banner`: This indicates that a store category can have one associated banner, serialized using the `Api::V1::AssetSerializer`.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It operates independently, relying solely on the ActiveModel::Serializer framework for its functionality.

## Usage Example
To use this serializer, you would typically call it within a controller action that responds with JSON. For example:
```ruby
render json: @store_category, serializer: Api::V1::StoreCategoryMinimalSerializer
```

## Best Practices
- Ensure that the attributes included in the serializer are relevant to the API consumers to avoid over-fetching data.
- Keep the serializer focused on minimal data representation to enhance performance and reduce payload size.
- When adding new attributes or associations, consider the impact on the API response and ensure backward compatibility.