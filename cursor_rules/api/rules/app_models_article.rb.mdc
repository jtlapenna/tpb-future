---
description: Documentation for the Article model in the application.
globs: ['app/models/article.rb']
alwaysApply: false
---

# Article Model Documentation

## Overview
The `Article` model represents articles in the application, inheriting from `ApplicationRecord`. It establishes relationships with categories and enforces validations to ensure data integrity.

## Key Components
- **Class Declaration**: `class Article < ApplicationRecord`
  - This line defines the `Article` class, which is a subclass of `ApplicationRecord`, allowing it to interact with the database through ActiveRecord.

- **Associations**: `belongs_to :category, optional: true`
  - This establishes a relationship where each article can belong to a category. The `optional: true` option allows articles to exist without a category.

- **Validations**:
  - `validates :title, :text, presence: true`
    - Ensures that both `title` and `text` fields are present when creating or updating an article.
  - `validates :tag, presence: true, unless: ->(article) { article.category.present? }`
    - Validates that a `tag` must be present unless a `category` is assigned.
  - `validates :category, presence: true, unless: ->(article) { article.tag.present? }`
    - Validates that a `category` must be present unless a `tag` is assigned.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It operates independently, relying solely on the ActiveRecord framework for its functionality.

## Usage Examples
To create a new article, you can use the following code:
```ruby
article = Article.new(title: 'My First Article', text: 'This is the content of the article.')
article.save
```

To create an article with a category:
```ruby
category = Category.create(name: 'News')
article = Article.new(title: 'Breaking News', text: 'Details about the news.', category: category)
article.save
```

## Best Practices
- Always ensure that either a `tag` or a `category` is provided when creating an article to avoid validation errors.
- Use meaningful titles and text to enhance the readability and SEO of articles.
- Regularly review and refactor validations as the application evolves to ensure they meet current requirements.