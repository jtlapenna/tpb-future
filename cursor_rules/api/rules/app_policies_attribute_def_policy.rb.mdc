---
description: Policy class for managing permissions related to attribute definitions.
globs: ['app/policies/attribute_def_policy.rb']
alwaysApply: false
---

# AttributeDefPolicy

## Overview
The `AttributeDefPolicy` class is a policy that defines the authorization rules for managing attribute definitions within the application. It inherits from `ApplicationPolicy`, which provides a base structure for all policy classes in the codebase.

## Key Components
- **Class Definition**: `AttributeDefPolicy` inherits from `ApplicationPolicy`, allowing it to utilize shared authorization logic.
- **Methods**:
  - `show?`: This method checks if the user is authorized to view an attribute definition. It returns `true` if a user is present, indicating that any authenticated user can view the attribute.
  - `index?`: Similar to `show?`, this method checks if the user is authorized to view a list of attribute definitions. It also returns `true` if a user is present.
  - `permitted_attributes`: This method returns an array of attributes that are permitted for mass assignment when creating or updating attribute definitions. The attributes include `:name`, `:attribute_group_id`, and `:restricted`, along with a nested `values` array for additional data.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It stands alone in defining the policy for attribute definitions.

## Usage Examples
To use this policy, you would typically call the methods within the context of a controller or service that manages attribute definitions. For example:
```ruby
if AttributeDefPolicy.new(user).show?
  # Logic to display the attribute definition
end
```

## Best Practices
- Ensure that the user object is always passed to the policy methods to avoid unexpected behavior.
- Review and update the `permitted_attributes` method as new attributes are added to the attribute definitions to maintain security and integrity.
- Consider extending the policy with additional methods if more complex authorization logic is required in the future.