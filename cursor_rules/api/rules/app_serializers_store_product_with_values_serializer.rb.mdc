---
description: Serializer for StoreProductWithValues, defining its attributes and relationships.
globs: ['app/serializers/store_product_with_values_serializer.rb']
alwaysApply: false
---

# StoreProductWithValuesSerializer

## Overview
The `StoreProductWithValuesSerializer` is a serializer class that defines how a `StoreProduct` object is represented in JSON format. It is part of the ActiveModel Serializers framework, which is used to create a structured JSON response for API endpoints in Ruby on Rails applications.

## Key Components
- **Class Definition**: The class inherits from `ActiveModel::Serializer`, which provides the necessary functionality to serialize the object.
- **Attributes**: The `attributes` method lists the fields that will be included in the serialized output. In this case, the attributes are:
  - `id`: Unique identifier for the store product.
  - `sku`: Stock Keeping Unit, a unique identifier for the product.
  - `name`: The name of the product.
  - `weight`: The weight of the product.
  - `tag_list`: A list of tags associated with the product.
  - `description`: A description of the product.
  - `share_email_template`: Template for sharing the product via email.
  - `share_sms_template`: Template for sharing the product via SMS.
  - `stock`: The current stock level of the product.
  - `override_tags`: Tags that override default tags.
  - `status`: The current status of the product (e.g., active, inactive).
  - `latest_update_source`: The source of the latest update to the product.

- **Relationships**: The `belongs_to` method defines relationships with other models:
  - `product_variant`: This relationship uses the `ProductVariantSerializer` to serialize the associated product variant.
  - `store_category`: This relationship links the product to its category in the store.

## Dependencies
This file does not import any other files and is not imported by any other files in the repository. It stands alone as a serializer for the `StoreProduct` model.

## Usage Example
To use this serializer, you would typically call it in a controller action when rendering a `StoreProduct` object. For example:
```ruby
render json: @store_product, serializer: StoreProductWithValuesSerializer
```

## Best Practices
- Ensure that the attributes defined in the serializer are relevant to the API consumers and do not expose sensitive information.
- Keep the serializer focused on a single model to maintain clarity and separation of concerns.
- Regularly review and update the serializer as the underlying model changes to ensure consistency in the API response.