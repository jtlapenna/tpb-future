---
description: Defines authorization rules for Article resources in the application.
globs: ['app/policies/article_policy.rb']
alwaysApply: false
---

# ArticlePolicy Documentation

## Overview
The `ArticlePolicy` class is responsible for defining the authorization rules for the `Article` resources in the application. It inherits from `ApplicationPolicy`, which provides a base structure for all policy classes in the application. This policy determines whether a user can perform certain actions related to articles, such as viewing a list of articles or a specific article.

## Key Components
- **Class Definition**: `class ArticlePolicy < ApplicationPolicy`
  - This line defines the `ArticlePolicy` class, which extends the `ApplicationPolicy` class, allowing it to inherit common authorization logic.

- **Methods**:
  - `def index?`
    - This method checks if a user is allowed to view the list of articles. It returns `true` if a user is present (i.e., logged in).
  - `def show?`
    - Similar to `index?`, this method checks if a user can view a specific article. It also returns `true` if a user is present.
  - `def permitted_attributes`
    - This method returns an array of attributes that are permitted for mass assignment when creating or updating an article. The attributes include `title`, `text`, `tag`, `icon`, `excerpt`, and `category_id`.

## Dependencies
This file does not import any other files in the repository, nor is it imported by any other files. It operates independently, relying solely on the `ApplicationPolicy` for its base functionality.

## Usage Examples
To use the `ArticlePolicy`, you would typically instantiate it with a user and an article object in your controller or service class. For example:
```ruby
policy = ArticlePolicy.new(user, article)
if policy.show?
  # Allow access to the article
else
  # Deny access
end
```

## Best Practices
- Ensure that the `user` object is always passed to the policy methods to avoid unexpected behavior.
- Regularly review the `permitted_attributes` method to ensure that only the necessary attributes are exposed for mass assignment, enhancing security.
- Consider adding additional methods to handle more complex authorization scenarios as the application grows.