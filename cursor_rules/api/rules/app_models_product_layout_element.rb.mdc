---
description: Documentation for the ProductLayoutElement model in the application.
globs: ['app/models/product_layout_element.rb']
alwaysApply: false
---

# ProductLayoutElement Model Documentation

## Overview
The `ProductLayoutElement` class represents an element within a product layout in the application. It inherits from `ApplicationRecord`, making it a part of the Active Record framework in Ruby on Rails. This model is responsible for managing the attributes and relationships of layout elements associated with products.

## Key Components

### Enum: `element_type`
The `element_type` attribute is defined as an enum, allowing for easy categorization of layout elements. The possible values are:
- `medium`: Represents a medium layout element.
- `dot`: Represents a dot layout element.
- `text`: Represents a text layout element.

### Associations
- **Belongs to**: The model has a polymorphic association with a `source`, which can be any model that provides context for the layout element.
- **Has many**: It has a one-to-many relationship with `product_layout_values`, which are dependent on the lifecycle of the `ProductLayoutElement`. If a `ProductLayoutElement` is destroyed, its associated `product_layout_values` will also be destroyed.

### Validations
The model includes validations to ensure that the following attributes are present:
- `element_type`
- `coord_x`
- `coord_y`

### Scope: `for_layout`
The `for_layout` scope allows for querying `ProductLayoutElement` records based on a given `product_layout`. It retrieves elements that belong to either a `ProductLayout` or a `ProductLayoutTab` associated with the specified layout.

## Dependencies
This file does not import or export any other files in the repository, indicating that it is self-contained. It does, however, rely on the `ProductLayout` and `ProductLayoutTab` models for its scope functionality.

## Usage Examples
To create a new `ProductLayoutElement`, you might use:
```ruby
ProductLayoutElement.create(element_type: :medium, coord_x: '100', coord_y: '200')
```

To retrieve elements for a specific layout:
```ruby
layout_elements = ProductLayoutElement.for_layout(product_layout_id)
```

## Best Practices
- Ensure that all required attributes are provided when creating or updating a `ProductLayoutElement` to avoid validation errors.
- Use the defined scope `for_layout` to efficiently query layout elements related to specific layouts, rather than manually constructing queries.
- When working with polymorphic associations, be mindful of the types of sources that can be associated with `ProductLayoutElement` to maintain data integrity.